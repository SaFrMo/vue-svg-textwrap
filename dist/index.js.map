{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import Vue from 'vue';\nfunction getConfig(mod, cfg) {\n\tconst ret = {\n\t\t'plain': !cfg.plain ? false : true,\n\t\t'width': null || cfg.width,\n\t\t'align': cfg.align || 'baseline',\n\t\t'lineHeight': cfg.lineHeight || '1.125em',\n\t\t'paddingLeft': cfg.paddingLeft === undefined ? (cfg.padding === undefined ? 0 : cfg.padding) : cfg.paddingLeft,\n\t\t'paddingRight': cfg.paddingRight === undefined ? (cfg.padding === undefined ? 0 : cfg.padding) : cfg.paddingRight\n\t};\n\tret.padding = ret.paddingLeft + ret.paddingRight;\n\tfor (let k in mod) {\n\t\tif (k === 'plain') ret.plain = true;\n\t\telse if (k === 'baseline' || k === 'top' || k === 'bottom' || k === 'middle' || k === 'none')\n\t\t\tret.align = k;\n\t\telse if (/\\d+/.test(k))\n\t\t\tret.width = parseInt(k);\n\t}\n\treturn ret;\n}\n/**\n * @param {SVGTextElement} el \n * @param {SVGTSpanElement} span \n * @param {*} config \n */\nfunction newLine(el, span, config) {\n\tconst tmp = span.cloneNode();\n\tel.insertBefore(tmp, span.nextSibling);\n\tspan.style.display = null;\n\ttmp.removeAttribute('y');\n\ttmp.setAttribute('dy', config.lineHeight);\n\ttmp.setAttribute('x', config.paddingLeft);\n\treturn tmp;\n}\n/**\n * @param {SVGTextElement} el \n * @param {String} text \n * @param {Object} config \n */\nfunction set(el, text, config) {\n\tel[config.plain ? 'textContent' : 'innerHTML'] = text || '';\n\tif (!config.width) return;\n\tconst plain = [];\n\tconst physLn = el.getBBox().height; // physical line height\n\t// convert text nodes to tspans, clear spans\n\tel.childNodes.forEach(function (n) {\n\t\tif (n instanceof Text) {\n\t\t\tconst tmp = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n\t\t\ttmp.textContent = n.textContent;\n\t\t\tel.replaceChild(tmp, n);\n\t\t\tn = tmp;\n\t\t}\n\t\tplain.push(n.textContent.split(' '));\n\t\tn.textContent = '';\n\t});\n\tif (el.childElementCount) {\n\t\tel.childNodes[0].setAttribute('y', 0);\n\t\tel.childNodes[0].setAttribute('x', config.paddingLeft);\n\t}\n\n\t// float texts\n\tlet offset = 0, w = config.width - config.padding, childCnt = el.childElementCount;\n\tfor (let c = 0; c < childCnt; c++) {\n\t\tconst words = plain[c];\n\t\tlet wc = words.length, span = el.childNodes[c + offset], txt = '', forceBreak = false;\n\t\tfor (let i = 0; i < wc; i++) {\n\t\t\tspan.textContent += i ? ' ' + words[i] : words[i];\n\t\t\tforceBreak = el.getBBox().width > w;\n\t\t\twhile (forceBreak) {\n\t\t\t\tspan.textContent = txt;\n\t\t\t\tspan = newLine(el, span, config);\n\t\t\t\ttxt = span.textContent = words[i];\n\t\t\t\toffset++;\n\t\t\t\tif (el.getBBox().width > w) {\n\t\t\t\t\tspan.style.display = 'none'; // too long word, hide for further correct measurements\n\t\t\t\t\ttxt = words[++i];\n\t\t\t\t\tif (!txt) forceBreak = false;\n\t\t\t\t} else forceBreak = false;\n\t\t\t}\n\t\t\ttxt = span.textContent;\n\t\t}\n\t}\n\tel.childNodes.forEach(function (n) { n.style.display = null })\n\tif (config.align === 'middle')\n\t\tel.setAttribute('transform', `translate(0, -${(el.getBBox().height - physLn) / 2})`)\n\telse if (config.align === 'baseline')\n\t\tel.setAttribute('transform', `translate(0, -${config.lineHeight - physLn})`)\n\telse if (config.align === 'bottom')\n\t\tel.setAttribute('transform', `translate(0, -${el.getBBox().height - physLn})`)\n\telse if (config.align === 'top')\n\t\tel.setAttribute('transform', `translate(0, ${physLn})`)\n}\n\n/**\n * Creates a new wrapper directive with the given configuration.\n * @param {ITextWrapperConfiguration} config A configuration object.\n */\nfunction directive(config) {\n\tif (!config) config = {};\n\treturn {\n\t\tinserted(el, binding) {\n\t\t\tif (!(el instanceof SVGTextElement))\n\t\t\t\tthrow new Error('Text-wrap directive must be bound to an SVG text element.');\n\t\t\tel.__WRAP_CONFIG = getConfig(binding.modifiers, config);\n\t\t\tset(el, binding.value, el.__WRAP_CONFIG);\n\t\t},\n\t\tupdate(el, binding) {\n\t\t\tif (binding.value != binding.oldValue)\n\t\t\t\tif (binding.value && (typeof binding.value) !== 'string') {\n\t\t\t\t\tconst text = binding.value.text;\n\t\t\t\t\tset(el, text, Object.assign({}, el.__WRAP_CONFIG, binding.value));\n\t\t\t\t} else\n\t\t\t\t\tset(el, binding.value, el.__WRAP_CONFIG);\n\t\t},\n\t\tunbind(el) {\n\t\t\tdelete el.__WRAP_CONFIG;\n\t\t}\n\t}\n}\nconst Wrapper = directive();\nexport default Wrapper;\n\nexport const ConfiguredWrapper = directive;"]}